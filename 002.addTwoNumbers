
//注意：1.判断l1和l2是否为空；
//      2.l1和l2长度一致，最高位有进位；[3],[7]
//      3.l1和l2长度不一致
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //1.如果两个链表长度不一致
 //input:l1=[1,8],l2=[0],output=[1]   期望：[1,8]
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //1.l1 and l2 both null,return null
        if(l1==null&&l2==null){
            return null;
        }
        //2.l1 null,return l2
        if(l1==null){
            return l2;
        }
        //3.l2 null,return l1
        if(l2==null){
            return l1;
        }
        //4.l1 and l2 both not null
        ListNode res=new ListNode(0);
        ListNode tmp=res;
        int flag=0;
        //int sum=0;
        while(l1!=null&&l2!=null){
            int sum=l1.val+l2.val+flag;
            if(sum>=10){
                tmp.next=new ListNode(sum%10);
                flag=1;
            }
            else{
                tmp.next=new ListNode(sum);
                flag=0;
            }
            l1=l1.next;
            l2=l2.next;
            tmp=tmp.next;
        }
        
        if(flag==1){
            tmp.next=new ListNode(1);
        }
        return res.next;
    }
}


//2.遍历两个链表，把各个位数相加，注意进位      （26ms, 99.78%）
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //1.l1 and l2 both null,return null
        if(l1==null&&l2==null){
            return null;
        }
        //2.l1 null,return l2
        if(l1==null){
            return l2;
        }
        //3.l2 null,return l1
        if(l2==null){
            return l1;
        }
        //4.l1 and l2 both not null
        ListNode res=new ListNode(0);
        ListNode tmp=res;
        int flag=0;
        int sum=0;
        while(l1!=null||l2!=null){
            if(l1!=null){
                sum=l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                sum+=l2.val;
                l2=l2.next;
            }
            sum+=flag;
            if(sum>=10){
                tmp.next=new ListNode(sum%10);
                flag=1;
            }
            else{
                tmp.next=new ListNode(sum);
                flag=0;
            }
            tmp=tmp.next;
            sum=0;
        }
        
        if(flag==1){
            tmp.next=new ListNode(1);
        }
        return res.next;
    }
}

