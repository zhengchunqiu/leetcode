//1.暴力搜索  171ms 4.24%
    public int lengthOfLongestSubstring(String str) {
		int len=str.length();
		int ans=0,i=0,j=0;
        if(len==0)
            return 0;
        if(len==1)
            return 1;
		for(i=0;i<len-1;i++) {
			for(j=i+1;j<len;j++) {
				String ss=str.substring(i, j);
				String s=""+str.charAt(j);
				if(ss.contains(s)) {
					if(j-i>ans) {
						ans=j-i;
					}
					break;
				}
				if(j==len-1) {
					if(ans<j-i+1) {
						ans=j-i+1;
					}
				}
			}
		}
		return ans;
    }
    
 //2.改良版暴搜   24ms 98.49%
 class Solution {
       public int lengthOfLongestSubstring(String str) {
		int index=0;
		int maxLength=1;
		int len=str.length();
    if(len==0) return 0;
		for(int i=1;i<len;i++) {
			for(int j=i-1;j>=index;j--) {
				if(str.charAt(i)==str.charAt(j)) {
					index=j+1;
					break;
				}
				else {
					if(maxLength<i-j+1)
						maxLength=i-j+1;
				}
			}
		}
		return maxLength;
    }
}
    
 //Approach 2:Sliding Window   40ms  91.82%  
 class Solution {
       public int lengthOfLongestSubstring(String str) {
		int len=str.length();
		int ans=0,i=0,j=0;
		Set<Character> set=new HashSet<>();
        while(i<len&&j<len){
            if(!set.contains(str.charAt(j))){
                set.add(str.charAt(j++));
                ans=Math.max(ans,j-i);
            }
            else{
                set.remove(str.charAt(i++));
            }
        }
		return ans;	
    }
}
//Approach 3:Sliding Window Optimized  30ms 96.02%
class Solution {
       public int lengthOfLongestSubstring(String str) {
			int len=str.length();
			int ans=0,i=0,j=0;
			Map<Character,Integer> map=new HashMap<>();
			for(j=0,i=0;j<len;j++) {
				if(map.containsKey(str.charAt(j))) {
					i=Math.max(map.get(str.charAt(j)), i);
				}
				ans=Math.max(ans, j-i+1);
				map.put(str.charAt(j), j+1);
			}
			return ans;
    }
}
    
   
